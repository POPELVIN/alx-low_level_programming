!<arch>
0-isupper.c/    0           0     0     644     414       `
#include "main.h"

/**
 * _isupper - function declaration
 * Description: check case of c
 * @c: character to test
 * Return: 1 for true and 0 for false
 */

int _isupper(int c);

/**
 * _isupper - function definition
 * Description: tests case of c
 * @c: character to test
 * Return: 1 if upper 0 if not upper
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     555       `
#include "main.h"

/**
 * *_memset - function declaration
 * @s: pointer to constant
 * @b: constant
 * @n: number of bytes
 * Return: pointer
 */

char *_memset(char *s, char b, unsigned int n);

/**
 * *_memset - function definition
 * @s: pointer to a constant
 * @b: constant to be used
 * @n: maximum number of bytes
 * Description: fills a memory address with constant byte
 * Return: pointer s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int index;

	for (index = 0; n > 0; index++)
	{
		s[index] = b;
		n--;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     636       `
#include "main.h"

/**
 * _strcat - function declaration
 * @dest: second string
 * @src: first string
 * Return: charcter
 */

char *_strcat(char *dest, char *src);

/**
 * _strcat - function definition
 * Description: concatenates dest and src strings
 * @dest: second string
 * @src: first string
 * Return: character
 */

char *_strcat(char *dest, char *src)
{
	int dest_index;
	int src_index;

	for (dest_index = 0; dest[dest_index] != '\0'; dest_index++)
	{}

	for (src_index = 0; src[src_index] != '\0'; src_index++)
	{
		dest[dest_index + src_index] = src[src_index];
	}
	dest[dest_index + src_index] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     569       `
#include "main.h"

/**
 * _atoi - function declaration
 * @s: string pointer
 * Return: integer equivalen of string
 */

int _atoi(char *s);

/**
 * _atoi - function definition
 * Description: convert string to integer
 * @s: the string pointer
 * Return: integer value of string
 */

int _atoi(char *s)
{
	int num_sign = 1;
	unsigned int digit = 0;

	do {
		if (*s == '-')
		{
			num_sign *= -1;
		}
		else if (*s >= '0' && *s <= '9')
		{
			digit = (digit * 10) + (*s - '0');
		}
		else if (digit > 0)
		{
			break;
		}
	} while (*s++);
	return (digit * num_sign);
}

1-isdigit.c/    0           0     0     644     400       `
#include "main.h"

/**
 * _isdigit - function declaration
 * Description: test if digit
 * @c: value to check
 * Return: 1 for true, 0 for fals
 */

int _isdigit(int c);

/**
 * _isdigit - function definition
 * Description: test if c is a digit
 * @c: the value to test
 * Return: 1-true, 0-false
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     586       `
#include "main.h"

/**
 * *_memcpy - function declaration
 * @dest: destination address
 * @src: source address
 * @n: number of times
 * Return: sring
 */

char *_memcpy(char *dest, char *src, unsigned int n);

/**
 * *_memcpy - function definition
 * @dest: the destination address
 * @src: the source address
 * @n: number of times to copy
 * Description: copies the src to dest n times
 * Return: copied string
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int index;

	for (index = 0; index < n; index++)
	{
		dest[index] = src[index];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     755       `
#include "main.h"

/**
 * _strncat - function declaration
 * @dest: second string
 * @src: first string
 * @n: number of time to append
 * Return: character string
 */

char *_strncat(char *dest, char *src, int n);

/**
 * _strncat - function definition
 * @dest: second string value
 * @src: first string value
 * @n: number of time
 * Description: concatenates number of times
 * Return: character string value
 */

char *_strncat(char *dest, char *src, int n)
{
	int src_index;
	int dest_index;

	for (dest_index = 0; dest[dest_index] != '\0'; dest_index++)
	{
	}

	for (src_index = 0; src_index < n && src[src_index] != '\0'; src_index++)
	{
		dest[dest_index + src_index] = src[src_index];
	}
	dest[dest_index + src_index] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     548       `
#include "main.h"

/**
 * *_strchr - function declaration
 * @s: the string
 * @c: the character
 * Return: a character
 */
char *_strchr(char *s, char c);

/**
 * *_strchr - function definition
 * @s: the string to be searched
 * @c: the character to find
 * Description: finds a character in a string
 * Return: a character value
 */

char *_strchr(char *s, char c)
{
	int index;

	for (index = 0; s[index] != '\0'; index++)
	{
		if (s[index] == c)
		{
			return (s + index);
		}
	}
	if (s[index] == c)
	{
		return (s + index);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     389       `
#include "main.h"

/**
 * _strlen - function declaration
 * Description: find length of a string
 * @s: the string ptr
 * Return: index
 */

int _strlen(char *s);

/**
 * _strlen - function definition
 * Description: checks string length
 * @s: the string pointer
 * Return: index
 */

int _strlen(char *s)
{
	int index;

	for (index = 0; s[index] != '\0'; index++)
	{}
	return (index);
}

2-strncpy.c/    0           0     0     644     619       `
#include "main.h"

/**
 * _strncpy - function declaration
 * @dest: second string
 * @src: first string
 * @n: number of times to copy
 * Return: a string
 */

char *_strncpy(char *dest, char *src, int n);

/**
 * _strncpy - function definition
 * @dest: the second string
 * @src: the first string
 * @n: number of times to copy string
 * Description: copies a string
 * Return: string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int index;

	for (index = 0; index < n && src[index] != '\0'; index++)
	{
		dest[index] = src[index];
	}
	for (; index < n; index++)
	{
		dest[index] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     453       `
#include <stdio.h>
#include "main.h"

/**
 * _islower - tests if lower or uppercase
 * @c: character passed as integer
 * Description: c is passed  as an arguement
 * Return: void
 */

int _islower(int c);

/**
 * _islower - tests c if lower or upper
 * @c: character is passed as integer
 * Description: c is the arguement as integer
 * Return: void
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     380       `
#include "main.h"

/**
 * _puts - function declaration
 * @str: string pointer
 * Return: void
 */

void _puts(char *str);

/**
 * _puts - function definition
 * Description: prints a string
 * @str: the string pointer
 * Return: void
 */

void _puts(char *str)
{
	int index;

	for (index = 0; *(str + index) != '\0'; index++)
	{
		_putchar(*(str + index));
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     513       `
#include "main.h"

/**
 * _strcmp - Compares pointers to two strings.
 * @s1: A pointer to the first string to be compared.
 * @s2: A pointer to the second string to be compared.
 *
 * Return: If str1 < str2, the negative difference of
 * the first unmatched characters.
 *         If s1 == s2, 0.
 *         If s1 > s2, the positive difference of
 *         the first unmatched characters.
 */
int _strcmp(char *s1, char *s2)
{
	while ((*s1 && *s2) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     718       `
#include "main.h"

/**
 * _strspn - function declaration
 * @s: source string
 * @accept: prefix substring
 * Return: number of bytes
 */

unsigned int _strspn(char *s, char *accept);

/**
 * _strspn - function definition
 * @s: the string to search
 * @accept: the prefic substring to be tested
 * Description: returns number of bytes in s
 * which only has bytes from accept
 * Return: number of bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int index;

	while (*s)
	{
		for (index = 0; accept[index]; index++)
		{
			if (*s == accept[index])
			{
				bytes++;
				break;
			}
			else if (accept[index + 1] == '\0')
			{
				return (bytes);
			}
		}
		s++;
	}
	return (bytes);
}
4-isalpha.c/    0           0     0     644     491       `
#include <stdio.h>
#include "main.h"

/**
 * _isalpha - check if in alphabet
 * @c: arguement as integer
 * Description: check if c is in alphabet
 * Return: void
 */

int _isalpha(int c);

/**
 * _isalpha - test if c is in alphabet
 * @c: the arguement to be tested, is integer
 * Description: tests is c is in alphabet
 * Return: void
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     723       `
#include "main.h"

/**
 * *_strpbrk - function declaration
 * @s: string to search
 * @accept: bytes to search
 * Return: pointer or NULL
 */

char *_strpbrk(char *s, char *accept);

/**
 * *_strpbrk - function definition
 * @s: the string to be searched
 * @accept: bytes to search for
 * Description: searches for a string of a set of bytes
 * Return: pointer to matched byte or NULL if no match
 */

char *_strpbrk(char *s, char *accept)
{
	int str_index;
	int sub_str_index;

	for (str_index = 0; s[str_index] != '\0'; str_index++)
	{
		for (sub_str_index = 0; accept[sub_str_index] != '\0'; sub_str_index++)
		{
			if (s[str_index] == accept[sub_str_index])
			{
				return (s + str_index);
			}
		}
	}
	return (0);
}

5-strstr.c/     0           0     0     644     929       `
#include "main.h"

/**
 * *_strstr - function declaration
 * @haystack: the string to be searched
 * @needle: the substring
 * Return: string or NULL
 */

char *_strstr(char *haystack, char *needle);

/**
 * *_strstr - function definition
 * @haystack: that string that will be searched
 * @needle: the substring to search for
 * Description: search for needle in haystack
 * Return: string or NULL
 */

char *_strstr(char *haystack, char *needle)
{
	int hay_index;
	int needle_index;

	if (needle[0] == '\0')
	{
		return (haystack);
	}

	for (hay_index = 0; haystack[hay_index] != '\0'; hay_index++)
	{
		if (haystack[hay_index] == needle[0])
		{
			for (needle_index = 0; needle[needle_index] != '\0'; needle_index++)
			{
				if (haystack[hay_index + needle_index] != needle[needle_index])
				{
					break;
				}
			}
			if (needle[needle_index] == '\0')
			{
				return (haystack + hay_index);
			}
		}
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     434       `
#include <stdio.h>
#include "main.h"

/**
 * _abs - function declaration
 * @n: integer to test
 * Description: convert number to absolute
 * Return: void
 */

int _abs(int n);

/**
 * _abs - function definition
 * @n: integer that will be tested
 * Description: convert and print number absolute
 * Return: void
 */

int _abs(int n)
{
	if (n < 0)
	{
		return (-n);
	}
	else if (n > 0)
	{
		return (n);
	}
	else
	{
		return (n);
	}
}
9-strcpy.c/     0           0     0     644     513       `
#include "main.h"
#include "2-strlen.c"

/**
 * _strcpy - function declaration
 * @dest: destination to copy
 * @src: source to copy
 * Return: destination
 */

char *_strcpy(char *dest, char *src);

/**
 * _strcpy - function declaration
 * Description: copies a string
 * @dest: destination to copy to
 * @src: source to copy from
 * Return: destination
 */

char *_strcpy(char *dest, char *src)
{
	int index;

	for (index = 0; index <= _strlen(src); index++)
	{
		dest[index] = src[index];
	}
	return (dest);
}

main.c/         0           0     0     644     140       `
#include "main.h"

int main(void)
{
_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
return (0);
}
_putchar.c/     0           0     0     644     174       `
#include <unistd.h>

/**
 * _putchar - prints/writes c
 * @c: The character to print
 * Return: 1, success, -1 error
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
